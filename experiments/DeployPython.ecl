IMPORT python3;
STRING  whereami() := IMPORT(python3, 'os.getcwd');
whereami();

installPolyTools() := EMBED(python3)
  pyscript  = '# https://github.com/hpcc-systems/HPCC-Platform/blob/master/initfiles/examples/embed/python-stream.ecl\n# https://hpccsystems.com/bb/viewtopic.php?f=10&t=3613\n# https://hpccsystems.com/bb/viewtopic.php?f=23&t=5243\n# https://hpccsystems.com/blog/embedding-tensorflow-operations-ecl\n# https://hpccsystems.com/bb/viewtopic.php?f=41&t=1509\n\n\n## Sort out dependencies\nimport pip\n\nif hasattr(pip, "main"):\n\tinstaller = pip.main\nelse:\n\tinstaller = pip._internal.main\n\t\ntry:\n\timport shapely\nexcept ImportError:\n\tinstaller(["install", "shapely"])\n\timport shapely\n\t\ntry:\n\timport pyproj\nexcept ImportError:\n\tinstaller(["install", "pyproj"])\n\timport pyproj\t\n#########################\n\t\n\t\nimport pyproj \nfrom shapely import wkt, ops\nfrom itertools import combinations\nimport shapely\nimport warnings\nimport itertools\n\ndef _convert_wkt(poly):\n\tif isinstance(poly, str):\n\t\treturn wkt.loads(poly)\n\telse:\n\t\treturn poly\n\t\t\t\t\n\t\t\t\t\ndef poly_area(poly):\n# TODO: NEED A CRS and a project!\t\n# Or just good documentation!\n\tpoly = _convert_wkt(poly)\n\treturn str(poly.area)\n\n\ndef wkt_isvalid(poly):\t\n\t\tpoly = _convert_wkt(poly)\n\t\treturn poly.is_valid\n \n\ndef poly_isin(poly1, poly2):\n\tpoly1 = _convert_wkt(poly1)\n\tpoly2 = _convert_wkt(poly2)\n\treturn poly1.contains(poly2)\n\t\n\t\ndef poly_intersect(poly1, poly2):\n\tpoly1 = _convert_wkt(poly1)\n\tpoly2 = _convert_wkt(poly2)\n\treturn poly1.intersects(poly2)\n\n\t\ndef project_polygon(shp, proj):\n\t"""\n\tProject from one CRS to another. Usually used to make area calcs sensible\n\tTODO: Add a default for the global one. \n\t"""\n\tproj = find_zone(shp.centroid)\n\tif pd.isnull(proj):\n\t\twarnings.warn("zone is null, returning np.nan.")\n\t\treturn np.nan\n\tp1 = pyproj.Proj(init="epsg:4326")\n\tp2 = pyproj.Proj(init=proj)\n\n\tt = lambda x, y: pyproj.transform(p1, p2, x, y)\n\tr = ops.transform(t, shp)\n\t\n\treturn r\n\t\n\t \ndef calc_overlap_polygon(polys, typ):\n\t"""\n\ttyp can be overlap or unique?\n\t"""\n\tcombinations = itertools.combinations(polys, 2)\n\toverlaps = [a.intersection(b) for a,b in combinations]\n\t\n\tunioned_overlaps = poly_union(overlaps)\n\t\n\tif typ == "area":\n\t\tprojected_overlaps = project_polygon(unioned_overlaps)\n\t\ttry:\n\t\t\treturn projected_overlaps.area / 10000\t# Why the conversion? Hectare thing? \n\t\texcept AttributeError:\n\t\t\treturn 0\n\t\t\t\n\telif typ == "polygon":\n\t\treturn str(unioned_overlaps)\n\n# def poly_intersects\n\n\n# def poly_contains_poly # bad name, part of point function? \n#### YOU ARE HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t \n\t \n\t \ndef poly_union(in_polys, tol=0.000001):\n\t"""\n\tUnion a list of polygons. Drops invalid polygons at read in\n\tso CHECK THIS FIRST! `poly_isvalid` will help you here. \n\n\tParameters\n\t----------\n\tin_polys: list\n\t\tpolygons to merge in WKT format.\n\ttol: float\n\t\ttolerance to simplify polygons by in the case of an overlapping \n\t\tmerge.\n\n\tReturns\n\t-------\n\ttype: string\n\t\tString of the resulting WKT.\n\t"""\n\tcombined = shapely.geometry.Polygon()\t \n\tpolys = []\n\tfor poly in in_polys:\n\t\ttry:\n\t\t\tpolys.append(_convert_wkt(poly))\n\t\texcept shapely.errors.WKTReadingError:\n\t\t\twarnings.warn("Dropping invalid polygon")\n\t\t\tpass\n\t\n\tfor new in polys:\n\t# first check the new one is valid\n\t\tif not new.is_valid:\n\t\t\twarnings.warn("{} is not a valid polygon".format(new.wkt))\n\t\t\tcontinue\n\t\ttry:\n\t\t\tcombined = combined.union(new)\n\t\texcept shapely.errors.TopologicalError as e:\n\t\t\twarnings.warn("TopologicalError was raised, trying to simplify both polygons.")\n\t\t\tcombined = combined.simplify(tol)\n\t\t\tnew = new.simplify(tol)\n\t\t\tcombined = combined.union(new)\n\t\texcept Exception as e:\n\t\t\twarnings.warn("combining {} and {} failed".format(combined.wkt, new.wkt))\n\t\t\treturn "Invalid Merged Geometry"\n\t\t\t\t\t\t\t\n\t\tif not combined.is_valid:\n\t\t\t# then check the one we make is valid\n\t\t\twarnings.warn("An invalid polygon was created. Simplification has taken place.")\n\t\t\tcombined = combined.simplify(tol)\n\treturn str(combined)\n\n\t\ndef wkts_are_valid(recs):\n\t"""\n\tEnsures your WKTs are valid \n\t\n\tTakes an ECL dataset {STRING uid; STRING polygon;}\n\tReturns an ECL dataset {STRING uid; BOOLEAN is_valid;}\n\t"""\n\tfor rec in recs:\n\t\ttry:\n\t\t\tpoly = _convert_wkt(rec.polygon)\n\t\t\tis_valid = poly.is_valid\n\t\texcept shapely.errors.WKTReadingError:\n\t\t\tis_valid = False\n\t\tyield (rec.uid, is_valid)\n\t\t\t\t\n\t\t\t\t\ndef polys_area(recs):\t\n\t"""\n\tFailures will not be returned. Test with polys_is_valid\n\tfirst! \n\t\n\tTakes an ECL dataset {STRING uid; STRING polygon;}\n\tReturns an ECL dataset {STRING uid; REAL area;}\n\t"""\n\tfor rec in recs:\n\t\ttry:\n\t\t\tpoly = _convert_wkt(rec.polygon)\n\t\t\tyield (rec.uid, poly.area)\n\t\texcept shapely.errors.WKTReadingError:\n\t\t\tpass\n \n\ndef polys_arein(recs):\t## TODO: rename to polys_ponts_arein\n\t"""\n\tFailures will not be returned. Test with polys_are_valid\n\tfirst! \n\n\tTakes an ECL dataset {STRING uid; STRING polygon1; STRING polygon1;}\n\tReturns an ECL dataset {STRING uid; BOOLEAN is_in;}\n\t"""\n\tfor rec in recs:\n\t\ttry:\n\t\t\tpoly = _convert_wkt(rec.polygon)\n\t\t\tpoint = _convert_wkt(rec.point) \n\t\texcept shapely.errors.WKTReadingError:\n\t\t\tcontinue\n\t\tyield (rec.uid, poly.contains(point)) ## TODO: Can we hand a polygon too? \n\t \n\t \ndef polys_union(recs, tol = 0.000001):\t\t\t\n\t"""\n\tFailures will be silently dropped from the merge. Test \n\twith polys_is_valid first! \n\t\n\tTakes an ECL dataset {STRING uid; SET OF STRING polygons;}\n\tReturns an ECL dataset {STRING uid; STRING polygon;}\n\t"""\n\t\n\tfor rec in recs:\n\t\tyield (rec.uid, poly_union(rec.polygons, tol))\n\t\t\n\t\t\ndef polys_intersect(recs):\n\t"""\n\tTakes an ECL dataset {STRING uid; STRING polygon1; STRING polygon2;}\n\tReturns an ECL dataset {STRING uid; STRING polygon;}\n\t"""\n\tfor rec in recs:\n\t\tyield(rec.uid, poly_intersect(rec.polygon1, rec.polygon2))\n\n';
  with open ('./polygonToolsImport.py', 'w') as f:
    f.write(pyscript)

ENDEMBED;

installPolyTools();



